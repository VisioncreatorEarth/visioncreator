// Code generated by wunderctl. DO NOT EDIT.

import type { ClientOperationErrors, GraphQLError } from "@wundergraph/sdk/client";

export type OperationErrors = {
	MyNewsletterStatus: MyNewsletterStatusErrors;
	NewsletterToggle: NewsletterToggleErrors;
	activeVC: ActiveVCErrors;
	addItemsToShoppingList: AddItemsToShoppingListErrors;
	askClaude: AskClaudeErrors;
	askHominio: AskHominioErrors;
	checkCapabilities: CheckCapabilitiesErrors;
	checkInvestmentEligibility: CheckInvestmentEligibilityErrors;
	createInvite: CreateInviteErrors;
	createMessage: CreateMessageErrors;
	createProposal: CreateProposalErrors;
	createShoppingList: CreateShoppingListErrors;
	getCCP: GetCCPErrors;
	getCurrentMetrics: GetCurrentMetricsErrors;
	getInvestmentMetrics: GetInvestmentMetricsErrors;
	getProfile: GetProfileErrors;
	getUserCapabilities: GetUserCapabilitiesErrors;
	getUserStats: GetUserStatsErrors;
	getUserTokens: GetUserTokensErrors;
	getUsers: GetUsersErrors;
	getVoices: GetVoicesErrors;
	handleProposalDecision: HandleProposalDecisionErrors;
	insertDB: InsertDBErrors;
	manageCapabilities: ManageCapabilitiesErrors;
	mintTokens: MintTokensErrors;
	onboardMe: OnboardMeErrors;
	polarCreateCheckout: PolarCreateCheckoutErrors;
	polarGetCheckout: PolarGetCheckoutErrors;
	polarListProducts: PolarListProductsErrors;
	polarMySubscriptions: PolarMySubscriptionsErrors;
	polarStoreWebhook: PolarStoreWebhookErrors;
	polarUpdateSubscription: PolarUpdateSubscriptionErrors;
	queryCallsAndTimeStats: QueryCallsAndTimeStatsErrors;
	queryComposer: QueryComposerErrors;
	queryDB: QueryDBErrors;
	queryLeaderboard: QueryLeaderboardErrors;
	queryMails: QueryMailsErrors;
	queryMe: QueryMeErrors;
	queryMessages: QueryMessagesErrors;
	queryMyCapabilities: QueryMyCapabilitiesErrors;
	queryMyShoppingList: QueryMyShoppingListErrors;
	queryOrgaStats: QueryOrgaStatsErrors;
	queryProposals: QueryProposalsErrors;
	queryUserStats: QueryUserStatsErrors;
	sandboxFiles: SandboxFilesErrors;
	sandboxFsRead: SandboxFsReadErrors;
	sandboxList: SandboxListErrors;
	sandboxReadFile: SandboxReadFileErrors;
	sandboxStart: SandboxStartErrors;
	sandboxStop: SandboxStopErrors;
	sandboxWriteFile: SandboxWriteFileErrors;
	saveMailWIP: SaveMailWIPErrors;
	sendMail: SendMailErrors;
	sendMailWIP: SendMailWIPErrors;
	toggleOnboarded: ToggleOnboardedErrors;
	updateMe: UpdateMeErrors;
	updateVotes: UpdateVotesErrors;
};

export type OperationUltravoxInitializationError = {
	code: "UltravoxInitializationError";
	statusCode: 400;
	message: "";
};
export type OperationUltravoxAuthenticationError = {
	code: "UltravoxAuthenticationError";
	statusCode: 401;
	message: "Invalid or missing Ultravox API key";
};

export type MyNewsletterStatusErrors = ClientOperationErrors;
export type NewsletterToggleErrors = ClientOperationErrors;
export type ActiveVCErrors = ClientOperationErrors;
export type AddItemsToShoppingListErrors = ClientOperationErrors;
export type AskClaudeErrors = ClientOperationErrors;
export type AskHominioErrors =
	| OperationUltravoxInitializationError
	| OperationUltravoxAuthenticationError
	| ClientOperationErrors;
export type CheckCapabilitiesErrors = ClientOperationErrors;
export type CheckInvestmentEligibilityErrors = ClientOperationErrors;
export type CreateInviteErrors = ClientOperationErrors;
export type CreateMessageErrors = ClientOperationErrors;
export type CreateProposalErrors = ClientOperationErrors;
export type CreateShoppingListErrors = ClientOperationErrors;
export type GetCCPErrors = ClientOperationErrors;
export type GetCurrentMetricsErrors = ClientOperationErrors;
export type GetInvestmentMetricsErrors = ClientOperationErrors;
export type GetProfileErrors = ClientOperationErrors;
export type GetUserCapabilitiesErrors = ClientOperationErrors;
export type GetUserStatsErrors = ClientOperationErrors;
export type GetUserTokensErrors = ClientOperationErrors;
export type GetUsersErrors = ClientOperationErrors;
export type GetVoicesErrors = ClientOperationErrors;
export type HandleProposalDecisionErrors = ClientOperationErrors;
export type InsertDBErrors = ClientOperationErrors;
export type ManageCapabilitiesErrors = ClientOperationErrors;
export type MintTokensErrors = ClientOperationErrors;
export type OnboardMeErrors = ClientOperationErrors;
export type PolarCreateCheckoutErrors = ClientOperationErrors;
export type PolarGetCheckoutErrors = ClientOperationErrors;
export type PolarListProductsErrors = ClientOperationErrors;
export type PolarMySubscriptionsErrors = ClientOperationErrors;
export type PolarStoreWebhookErrors = ClientOperationErrors;
export type PolarUpdateSubscriptionErrors = ClientOperationErrors;
export type QueryCallsAndTimeStatsErrors = ClientOperationErrors;
export type QueryComposerErrors = ClientOperationErrors;
export type QueryDBErrors = ClientOperationErrors;
export type QueryLeaderboardErrors = ClientOperationErrors;
export type QueryMailsErrors = ClientOperationErrors;
export type QueryMeErrors = ClientOperationErrors;
export type QueryMessagesErrors = ClientOperationErrors;
export type QueryMyCapabilitiesErrors = ClientOperationErrors;
export type QueryMyShoppingListErrors = ClientOperationErrors;
export type QueryOrgaStatsErrors = ClientOperationErrors;
export type QueryProposalsErrors = ClientOperationErrors;
export type QueryUserStatsErrors = ClientOperationErrors;
export type SandboxFilesErrors = ClientOperationErrors;
export type SandboxFsReadErrors = ClientOperationErrors;
export type SandboxListErrors = ClientOperationErrors;
export type SandboxReadFileErrors = ClientOperationErrors;
export type SandboxStartErrors = ClientOperationErrors;
export type SandboxStopErrors = ClientOperationErrors;
export type SandboxWriteFileErrors = ClientOperationErrors;
export type SaveMailWIPErrors = ClientOperationErrors;
export type SendMailErrors = ClientOperationErrors;
export type SendMailWIPErrors = ClientOperationErrors;
export type ToggleOnboardedErrors = ClientOperationErrors;
export type UpdateMeErrors = ClientOperationErrors;
export type UpdateVotesErrors = ClientOperationErrors;

name: Supabase Backup and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # Runs every day at midnight

jobs:
  backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
    steps:
      - uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Set backup filename
        run: |
          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            BACKUP_PREFIX="${TIMESTAMP}_cronjob"
          else
            SHORT_SHA=$(git rev-parse --short HEAD)
            BACKUP_PREFIX="${TIMESTAMP}_${SHORT_SHA}_commit"
          fi
          echo "BACKUP_PREFIX=$BACKUP_PREFIX" >> $GITHUB_ENV

      - name: Backup database
        run: |
          pg_dump --no-owner --no-acl "$SUPABASE_DB_URL" -f ${{ env.BACKUP_PREFIX }}_full.sql
          pg_dump --no-owner --no-acl --schema=public "$SUPABASE_DB_URL" -f ${{ env.BACKUP_PREFIX }}_public.sql
          pg_dump --no-owner --no-acl --schema=auth "$SUPABASE_DB_URL" -f ${{ env.BACKUP_PREFIX }}_auth.sql
          pg_dump --no-owner --no-acl --schema=storage "$SUPABASE_DB_URL" -f ${{ env.BACKUP_PREFIX }}_storage.sql

      - name: Backup roles
        run: |
          pg_dumpall --roles-only --no-role-passwords -f ${{ env.BACKUP_PREFIX }}_roles.sql "$SUPABASE_DB_URL"

      - name: Upload backups to DO Spaces
        uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: ${{ env.BACKUP_PREFIX }}*
          out_dir: backups

      - name: Clean up local backup files
        run: rm ${{ env.BACKUP_PREFIX }}*

  deploy:
    needs: backup
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
      PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Supabase Login
        run: supabase login $SUPABASE_ACCESS_TOKEN

      - name: Deploy Supabase Migration
        run: |
          cd packages/supacreator/supabase
          supabase link --project-ref $PROJECT_ID
          supabase db push
